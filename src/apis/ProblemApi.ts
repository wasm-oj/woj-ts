/* tslint:disable */
/* eslint-disable */
/**
 * WASM OJ Wonderland API
 * You can interact with WASM OJ Wonderland through this API
 *
 * The version of the OpenAPI document: 0.0.4
 * Contact: jacob@csie.cool
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import * as runtime from '../runtime';
import type {
  GetProblem200Response,
  ListProblems200Response,
  Login400Response,
} from '../models/index';
import {
    GetProblem200ResponseFromJSON,
    GetProblem200ResponseToJSON,
    ListProblems200ResponseFromJSON,
    ListProblems200ResponseToJSON,
    Login400ResponseFromJSON,
    Login400ResponseToJSON,
} from '../models/index';

export interface GetProblemRequest {
    id: string;
}

/**
 * ProblemApi - interface
 * 
 * @export
 * @interface ProblemApiInterface
 */
export interface ProblemApiInterface {
    /**
     * 
     * @param {string} id 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemApiInterface
     */
    getProblemRaw(requestParameters: GetProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProblem200Response>>;

    /**
     */
    getProblem(requestParameters: GetProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProblem200Response>;

    /**
     * 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof ProblemApiInterface
     */
    listProblemsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProblems200Response>>;

    /**
     */
    listProblems(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProblems200Response>;

}

/**
 * 
 */
export class ProblemApi extends runtime.BaseAPI implements ProblemApiInterface {

    /**
     */
    async getProblemRaw(requestParameters: GetProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<GetProblem200Response>> {
        if (requestParameters.id === null || requestParameters.id === undefined) {
            throw new runtime.RequiredError('id','Required parameter requestParameters.id was null or undefined when calling getProblem.');
        }

        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/problem/{id}`.replace(`{${"id"}}`, encodeURIComponent(String(requestParameters.id))),
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => GetProblem200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async getProblem(requestParameters: GetProblemRequest, initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<GetProblem200Response> {
        const response = await this.getProblemRaw(requestParameters, initOverrides);
        return await response.value();
    }

    /**
     */
    async listProblemsRaw(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<runtime.ApiResponse<ListProblems200Response>> {
        const queryParameters: any = {};

        const headerParameters: runtime.HTTPHeaders = {};

        const response = await this.request({
            path: `/api/problem`,
            method: 'GET',
            headers: headerParameters,
            query: queryParameters,
        }, initOverrides);

        return new runtime.JSONApiResponse(response, (jsonValue) => ListProblems200ResponseFromJSON(jsonValue));
    }

    /**
     */
    async listProblems(initOverrides?: RequestInit | runtime.InitOverrideFunction): Promise<ListProblems200Response> {
        const response = await this.listProblemsRaw(initOverrides);
        return await response.value();
    }

}
