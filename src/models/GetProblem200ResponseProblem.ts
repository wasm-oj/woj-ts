/* tslint:disable */
/* eslint-disable */
/**
 * WASM OJ Wonderland API
 * You can interact with WASM OJ Wonderland through this API
 *
 * The version of the OpenAPI document: 0.0.4
 * Contact: jacob@csie.cool
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { exists, mapValues } from '../runtime';
import type { GetProblem200ResponseProblemPolicyInner } from './GetProblem200ResponseProblemPolicyInner';
import {
    GetProblem200ResponseProblemPolicyInnerFromJSON,
    GetProblem200ResponseProblemPolicyInnerFromJSONTyped,
    GetProblem200ResponseProblemPolicyInnerToJSON,
} from './GetProblem200ResponseProblemPolicyInner';
import type { GetProblem200ResponseProblemTestcaseInner } from './GetProblem200ResponseProblemTestcaseInner';
import {
    GetProblem200ResponseProblemTestcaseInnerFromJSON,
    GetProblem200ResponseProblemTestcaseInnerFromJSONTyped,
    GetProblem200ResponseProblemTestcaseInnerToJSON,
} from './GetProblem200ResponseProblemTestcaseInner';

/**
 * 
 * @export
 * @interface GetProblem200ResponseProblem
 */
export interface GetProblem200ResponseProblem {
    /**
     * 
     * @type {string}
     * @memberof GetProblem200ResponseProblem
     */
    name: string;
    /**
     * 
     * @type {Array<string>}
     * @memberof GetProblem200ResponseProblem
     */
    tags?: Array<string>;
    /**
     * 
     * @type {string}
     * @memberof GetProblem200ResponseProblem
     */
    description: string;
    /**
     * 
     * @type {Array<GetProblem200ResponseProblemPolicyInner>}
     * @memberof GetProblem200ResponseProblem
     */
    policy: Array<GetProblem200ResponseProblemPolicyInner>;
    /**
     * 
     * @type {Array<GetProblem200ResponseProblemTestcaseInner>}
     * @memberof GetProblem200ResponseProblem
     */
    testcase: Array<GetProblem200ResponseProblemTestcaseInner>;
    /**
     * 
     * @type {string}
     * @memberof GetProblem200ResponseProblem
     */
    input?: string;
    /**
     * 
     * @type {string}
     * @memberof GetProblem200ResponseProblem
     */
    output?: string;
    /**
     * 
     * @type {string}
     * @memberof GetProblem200ResponseProblem
     */
    hint?: string;
}

/**
 * Check if a given object implements the GetProblem200ResponseProblem interface.
 */
export function instanceOfGetProblem200ResponseProblem(value: object): boolean {
    let isInstance = true;
    isInstance = isInstance && "name" in value;
    isInstance = isInstance && "description" in value;
    isInstance = isInstance && "policy" in value;
    isInstance = isInstance && "testcase" in value;

    return isInstance;
}

export function GetProblem200ResponseProblemFromJSON(json: any): GetProblem200ResponseProblem {
    return GetProblem200ResponseProblemFromJSONTyped(json, false);
}

export function GetProblem200ResponseProblemFromJSONTyped(json: any, ignoreDiscriminator: boolean): GetProblem200ResponseProblem {
    if ((json === undefined) || (json === null)) {
        return json;
    }
    return {
        
        'name': json['name'],
        'tags': !exists(json, 'tags') ? undefined : json['tags'],
        'description': json['description'],
        'policy': ((json['policy'] as Array<any>).map(GetProblem200ResponseProblemPolicyInnerFromJSON)),
        'testcase': ((json['testcase'] as Array<any>).map(GetProblem200ResponseProblemTestcaseInnerFromJSON)),
        'input': !exists(json, 'input') ? undefined : json['input'],
        'output': !exists(json, 'output') ? undefined : json['output'],
        'hint': !exists(json, 'hint') ? undefined : json['hint'],
    };
}

export function GetProblem200ResponseProblemToJSON(value?: GetProblem200ResponseProblem | null): any {
    if (value === undefined) {
        return undefined;
    }
    if (value === null) {
        return null;
    }
    return {
        
        'name': value.name,
        'tags': value.tags,
        'description': value.description,
        'policy': ((value.policy as Array<any>).map(GetProblem200ResponseProblemPolicyInnerToJSON)),
        'testcase': ((value.testcase as Array<any>).map(GetProblem200ResponseProblemTestcaseInnerToJSON)),
        'input': value.input,
        'output': value.output,
        'hint': value.hint,
    };
}

